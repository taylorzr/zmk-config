// vim: textwidth=0

/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYM     1
#define NAV     2


&mt {
  tapping-term-ms = <130>;
  quick-tap-ms = <200>;
  flavor = "hold-preferred";
};

&lt {
  tapping-term-ms = <150>;
  quick-tap-ms = <200>;
  flavor = "balanced";
};

&caps_word {
    continue-list = <LSHIFT UNDERSCORE MINUS BSPC>;
};

/ {
    macros {
        macro_par: macro_par {
            label = "macro_par";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
        };
        macro_brc: macro_brc {
            label = "macro_brc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap &kp LBRC &kp RBRC &kp LEFT>;
        };
        macro_brk: macro_brk {
            label = "macro_brk";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>;
        };
        macro_sqt: macro_sqt {
            label = "macro_sqt";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap &kp SQT &kp SQT &kp LEFT>;
        };
        macro_dqt: macro_dqt {
            label = "macro_dqt";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap &kp DQT &kp DQT &kp LEFT>;
        };
    };

    /*
    available combos
    he <- this is a bad combo because he is a common substring
    n,
    3 button combos might be useful
    */
    combos {
        compatible = "zmk,combos";
        combo_untab {
            timeout-ms = <50>;
            key-positions = <1 2>; // wf
            bindings = <&kp LS(TAB)>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <2 3>; // fp
            bindings = <&kp TAB>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <1 3>; // wp
            bindings = <&kp DEL>;
        };
        combo_del3 {
            timeout-ms = <50>;
            key-positions = <1 2 3>; // wfp
            bindings = <&kp DEL>;
        };
        combo_screenshot_copy {
            timeout-ms = <50>;
            key-positions = <12 23>; // sd
            bindings = <&kp LC(LS(LG(N4)))>;
        };
        combo_screenshot_file {
            timeout-ms = <50>;
            key-positions = <22 13>; // ct
            bindings = <&kp LS(LG(N4))>;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <21 22>; // xc
            bindings = <&kp LG(C)>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <21 23>; // xd
            bindings = <&kp LG(X)>;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <22 23>; // cd
            bindings = <&kp LG(V)>;
        };
        combo_sft_paste {
            timeout-ms = <50>;
            key-positions = <21 22 23>; // xcd
            bindings = <&kp LS(LG(V))>;
        };
        combo_reset {
            timeout-ms = <50>;
            key-positions = <23 24>; // dv
            bindings = <&reset>;
        };
        combo_play {
            timeout-ms = <50>;
            key-positions = <6 7>; // lu
            bindings = <&kp C_PP>;
        };
        combo_next {
            timeout-ms = <50>;
            key-positions = <5 7>; // jy
            bindings = <&kp C_NEXT>;
        };
        combo_next3 {
            timeout-ms = <50>;
            key-positions = <5 6 7>; // juy
            bindings = <&kp C_NEXT>;
        };
        combo_reset_right {
            timeout-ms = <50>;
            key-positions = <25 26>; // kh
            bindings = <&reset>;
        };
        combo_save3 {
            timeout-ms = <50>;
            key-positions = <16 17 18>; // nei
            bindings = <&kp LC(S)>;
        };
        combo_ent {
            timeout-ms = <50>;
            key-positions = <26 27>; // h,
            bindings = <&kp ENTER>;
        };
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <27 28>; // ,.
            bindings = <&caps_word>;
        };
        combo_bootloader {
            timeout-ms = <50>;
            key-positions = <4 5>; // bj
            bindings = <&bootloader>;
        };
        combo_bt_clr {
            timeout-ms = <50>;
            key-positions = <24 25>; // vk
            bindings = <&bt BT_CLR>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        td_par: td_par {
            compatible = "zmk,behavior-tap-dance";
            label = "td_par";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&macro_par>, <&kp LPAR>, <&kp RPAR>;
        };
        td_brc: td_brc {
            compatible = "zmk,behavior-tap-dance";
            label = "td_brc";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&macro_brc>, <&kp LBRC>, <&kp RBRC>;
        };
        td_bkt: td_bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "td_bkt";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&macro_brk>, <&kp LBKT>, <&kp RBKT>;
        };
        td_sqt: td_sqt {
            compatible = "zmk,behavior-tap-dance";
            label = "td_sqt";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&macro_sqt>, <&kp SQT>;
        };
        td_dqt: td_dqt {
            compatible = "zmk,behavior-tap-dance";
            label = "td_dqt";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&macro_dqt>, <&kp DQT>;
        };
        // FIXME: using this made the keyboard unresponsive
        m_par: m_par {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_PAR";
            #binding-cells = <0>;
            bindings = <&td_par>, <&kp LPAR>;
            mods = <(MOD_LSFT)>;
        };
    };

    // THOUGHTS
    // pipe char is just ok
    // hardly ever use ; or +
    // tilde and backtick feel pretty good


    keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
				&kp Q  &kp W       &kp F       &kp P  &kp B  &kp J  &kp L  &kp U       &kp Y       &kp SQT
				&kp A  &hm LALT R  &hm LGUI S  &kp T  &kp G  &kp M  &kp N  &hm LGUI E  &hm LALT I  &kp O
				&kp Z  &kp X       &kp C       &kp D  &kp V  &kp K  &kp H  &kp COMMA   &kp DOT     &kp SLASH
				&mt LCTRL ESC    &mt LSHFT BSPC    &lt SYM SPACE    &lt NAV MINUS
			>;
		};

		sym_layer {
			bindings = <
				&kp N1     &kp N2    &kp N3    &kp N4    &kp N5     &kp N6     &kp N7    &kp N8    &kp N9     &kp N0
				&kp EXCL   &kp AT    &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR  &kp EQUAL  &kp COLON
				&kp TILDE  &kp SEMI  &td_dqt   &td_sqt   &kp PIPE   &kp PLUS   &td_par   &td_brc   &td_bkt    &kp BSLH
				&kp GRAVE  &trans    &trans    &trans
			>;
		};

		nav_layer {
			bindings = <
				&bt BT_PRV  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_NXT  &trans    &kp C_VOL_DN  &kp C_VOL_UP  &trans     &kp C_SLEEP
				&kp F11     &kp F12       &kp LC(LS(LEFT))  &kp LC(LS(RIGHT))  &trans      &kp LEFT  &kp DOWN      &kp UP        &kp RIGHT  &trans
				&kp F1      &kp F2        &kp F3            &kp F4             &kp F5      &kp F6    &kp F7        &kp F8        &kp F9     &kp F10
				&trans    &trans    &trans    &trans
			>;
		};
    };
};
